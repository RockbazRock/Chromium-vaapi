From 136a79606fb83485e6c10257bb2e970d306c6f5f Mon Sep 17 00:00:00 2001
From: Akarshan Biswas <biswasab@akarshans-desk.biswasab.org>
Date: Thu, 6 Dec 2018 12:53:47 +0530
Subject: [PATCH] Don't use unrar

---
 .../check_client_download_request.cc          | 69 -------------------
 .../check_client_download_request.h           |  1 -
 chrome/common/safe_browsing/BUILD.gn          |  2 -
 chrome/services/file_util/public/cpp/BUILD.gn |  3 -
 .../public/mojom/safe_archive_analyzer.mojom  |  5 --
 .../file_util/safe_archive_analyzer.cc        |  9 ---
 .../file_util/safe_archive_analyzer.h         |  2 -
 7 files changed, 91 deletions(-)

diff --git a/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc b/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc
index d1413bb1d..ec337e92c 100644
--- a/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc
+++ b/chrome/browser/safe_browsing/download_protection/check_client_download_request.cc
@@ -380,10 +380,6 @@ void CheckClientDownloadRequest::AnalyzeFile() {
   // are enabled.
   if (item_->GetTargetFilePath().MatchesExtension(FILE_PATH_LITERAL(".zip"))) {
     StartExtractZipFeatures();
-  } else if (item_->GetTargetFilePath().MatchesExtension(
-                 FILE_PATH_LITERAL(".rar")) &&
-             base::FeatureList::IsEnabled(kInspectDownloadedRarFiles)) {
-    StartExtractRarFeatures();
 #if defined(OS_MACOSX)
   } else if (item_->GetTargetFilePath().MatchesExtension(
                  FILE_PATH_LITERAL(".dmg")) ||
@@ -500,71 +496,6 @@ void CheckClientDownloadRequest::ExtractFileFeatures(
   OnFileFeatureExtractionDone();
 }
 
-void CheckClientDownloadRequest::StartExtractRarFeatures() {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  DCHECK(item_);  // Called directly from Start(), item should still exist.
-  rar_analysis_start_time_ = base::TimeTicks::Now();
-  // We give the rar analyzer a weak pointer to this object.  Since the
-  // analyzer is refcounted, it might outlive the request.
-  rar_analyzer_ = new SandboxedRarAnalyzer(
-      item_->GetFullPath(),
-      base::BindRepeating(&CheckClientDownloadRequest::OnRarAnalysisFinished,
-                          weakptr_factory_.GetWeakPtr()),
-      content::ServiceManagerConnection::GetForProcess()->GetConnector());
-  rar_analyzer_->Start();
-}
-
-void CheckClientDownloadRequest::OnRarAnalysisFinished(
-    const ArchiveAnalyzerResults& results) {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  if (item_ == nullptr) {
-    PostFinishTask(DownloadCheckResult::UNKNOWN, REASON_REQUEST_CANCELED);
-    return;
-  }
-  if (!service_)
-    return;
-
-  archive_is_valid_ =
-      (results.success ? ArchiveValid::VALID : ArchiveValid::INVALID);
-  archived_executable_ = results.has_executable;
-  CopyArchivedBinaries(results.archived_binary, &archived_binaries_);
-  DVLOG(1) << "Rar analysis finished for " << item_->GetFullPath().value()
-           << ", has_executable=" << results.has_executable
-           << ", has_archive=" << results.has_archive
-           << ", success=" << results.success;
-
-  if (archived_executable_) {
-    UMA_HISTOGRAM_COUNTS_100("SBClientDownload.RarFileArchivedBinariesCount",
-                             results.archived_binary.size());
-  }
-  UMA_HISTOGRAM_BOOLEAN("SBClientDownload.RarFileSuccess", results.success);
-  UMA_HISTOGRAM_BOOLEAN("SBClientDownload.RarFileHasExecutable",
-                        archived_executable_);
-  UMA_HISTOGRAM_BOOLEAN("SBClientDownload.RarFileHasArchiveButNoExecutable",
-                        results.has_archive && !archived_executable_);
-  UMA_HISTOGRAM_TIMES("SBClientDownload.ExtractRarFeaturesTime",
-                      base::TimeTicks::Now() - rar_analysis_start_time_);
-  for (const auto& file_name : results.archived_archive_filenames)
-    RecordArchivedArchiveFileExtensionType(file_name);
-
-  if (!archived_executable_) {
-    if (results.has_archive) {
-      type_ = ClientDownloadRequest::RAR_COMPRESSED_ARCHIVE;
-    } else if (!results.success) {
-      // .rar files that look invalid to Chrome may be successfully unpacked by
-      // other archive tools, so they may be a real threat.
-      type_ = ClientDownloadRequest::INVALID_RAR;
-    } else {
-      // Normal rar w/o EXEs, or invalid rar and not extended-reporting.
-      PostFinishTask(DownloadCheckResult::UNKNOWN,
-                     REASON_ARCHIVE_WITHOUT_BINARIES);
-      return;
-    }
-  }
-
-  OnFileFeatureExtractionDone();
-}
-
 void CheckClientDownloadRequest::StartExtractZipFeatures() {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   DCHECK(item_);  // Called directly from Start(), item should still exist.
diff --git a/chrome/browser/safe_browsing/download_protection/check_client_download_request.h b/chrome/browser/safe_browsing/download_protection/check_client_download_request.h
index ae0f6fbe4..b74dde031 100644
--- a/chrome/browser/safe_browsing/download_protection/check_client_download_request.h
+++ b/chrome/browser/safe_browsing/download_protection/check_client_download_request.h
@@ -148,7 +148,6 @@ class CheckClientDownloadRequest
   scoped_refptr<SafeBrowsingDatabaseManager> database_manager_;
   const bool pingback_enabled_;
   std::unique_ptr<network::SimpleURLLoader> loader_;
-  scoped_refptr<SandboxedRarAnalyzer> rar_analyzer_;
   scoped_refptr<SandboxedZipAnalyzer> zip_analyzer_;
   base::TimeTicks rar_analysis_start_time_;
   base::TimeTicks zip_analysis_start_time_;
diff --git a/chrome/common/safe_browsing/BUILD.gn b/chrome/common/safe_browsing/BUILD.gn
index f971c742a..33f7c9d31 100644
--- a/chrome/common/safe_browsing/BUILD.gn
+++ b/chrome/common/safe_browsing/BUILD.gn
@@ -68,7 +68,6 @@ if (safe_browsing_mode == 1) {
       ":file_type_policies",
       "//base",
       "//base:i18n",
-      "//third_party/unrar:unrar",
     ]
 
     defines = [
@@ -136,7 +135,6 @@ source_set("safe_browsing") {
     deps += [
       ":archive_analyzer_results",
       ":download_protection_util",
-      ":rar_analyzer",
       "//components/safe_browsing:features",
     ]
 
diff --git a/chrome/services/file_util/public/cpp/BUILD.gn b/chrome/services/file_util/public/cpp/BUILD.gn
index 158cbfc6d..6d8b0df7c 100644
--- a/chrome/services/file_util/public/cpp/BUILD.gn
+++ b/chrome/services/file_util/public/cpp/BUILD.gn
@@ -14,8 +14,6 @@ source_set("cpp") {
     sources = [
       "sandboxed_dmg_analyzer_mac.cc",
       "sandboxed_dmg_analyzer_mac.h",
-      "sandboxed_rar_analyzer.cc",
-      "sandboxed_rar_analyzer.h",
       "sandboxed_zip_analyzer.cc",
       "sandboxed_zip_analyzer.h",
     ]
@@ -35,7 +33,6 @@ source_set("unit_tests") {
 
   sources = [
     "sandboxed_dmg_analyzer_mac_unittest.cc",
-    "sandboxed_rar_analyzer_unittest.cc",
     "sandboxed_zip_analyzer_unittest.cc",
   ]
 
diff --git a/chrome/services/file_util/public/mojom/safe_archive_analyzer.mojom b/chrome/services/file_util/public/mojom/safe_archive_analyzer.mojom
index 6983f7b41..15d5aaba3 100644
--- a/chrome/services/file_util/public/mojom/safe_archive_analyzer.mojom
+++ b/chrome/services/file_util/public/mojom/safe_archive_analyzer.mojom
@@ -22,11 +22,6 @@ interface SafeArchiveAnalyzer {
   // for malicious download protection.
   AnalyzeDmgFile(mojo_base.mojom.File dmg_file)
       => (SafeArchiveAnalyzerResults results);
-
-  // Build flag FULL_SAFE_BROWSING: Analyze the |rar_file| for malicious
-  // download protection.
-  AnalyzeRarFile(mojo_base.mojom.File rar_file)
-      => (SafeArchiveAnalyzerResults results);
 };
 
 [Native]
diff --git a/chrome/services/file_util/safe_archive_analyzer.cc b/chrome/services/file_util/safe_archive_analyzer.cc
index a13b42b19..db49c37b9 100644
--- a/chrome/services/file_util/safe_archive_analyzer.cc
+++ b/chrome/services/file_util/safe_archive_analyzer.cc
@@ -44,12 +44,3 @@ void SafeArchiveAnalyzer::AnalyzeDmgFile(base::File dmg_file,
   NOTREACHED();
 #endif
 }
-
-void SafeArchiveAnalyzer::AnalyzeRarFile(base::File rar_file,
-                                         AnalyzeRarFileCallback callback) {
-  DCHECK(rar_file.IsValid());
-
-  safe_browsing::ArchiveAnalyzerResults results;
-  safe_browsing::rar_analyzer::AnalyzeRarFile(std::move(rar_file), &results);
-  std::move(callback).Run(results);
-}
diff --git a/chrome/services/file_util/safe_archive_analyzer.h b/chrome/services/file_util/safe_archive_analyzer.h
index f21efa6f5..2eda4f378 100644
--- a/chrome/services/file_util/safe_archive_analyzer.h
+++ b/chrome/services/file_util/safe_archive_analyzer.h
@@ -25,8 +25,6 @@ class SafeArchiveAnalyzer : public chrome::mojom::SafeArchiveAnalyzer {
                       AnalyzeZipFileCallback callback) override;
   void AnalyzeDmgFile(base::File dmg_file,
                       AnalyzeDmgFileCallback callback) override;
-  void AnalyzeRarFile(base::File rar_file,
-                      AnalyzeRarFileCallback callback) override;
 
   const std::unique_ptr<service_manager::ServiceContextRef> service_ref_;
 
-- 
2.19.2

